import { Bot, InlineKeyboard } from "grammy";
import { MyContext } from "@/types/context";
import { listBudgets, getBudget } from "@/utils/db/budget";
import { Budget, BudgetStatus } from "@prisma/client";

export function setupBudgetCommands(bot: Bot<MyContext>) {
  bot.callbackQuery("view_budgets", async (ctx) => {
    try {
      if (!ctx.from?.id) {
        await ctx.answerCallbackQuery("Erro ao identificar usu√°rio");
        return;
      }

      const budgets = await listBudgets(ctx.from.id.toString());

      if (budgets.length === 0) {
        await ctx.editMessageText(
          "üìù *Meus Or√ßamentos*\n\nVoc√™ ainda n√£o tem nenhum or√ßamento.\nClique em 'Criar or√ßamento' para solicitar um!", {
          reply_markup: new InlineKeyboard()
            .text("üí∞ Criar or√ßamento", "create_budget").row()
            .text("üîô Voltar", "back_to_menu"),
          parse_mode: "Markdown"
        });
        await ctx.answerCallbackQuery();
        return;
      }

      const keyboard = new InlineKeyboard();
      budgets.forEach((budget) => {
        keyboard.text(
          `${getBudgetEmoji(budget.status)} ${budget.category} - ${formatDate(budget.createdAt)}`,
          `view_budget:${budget.id}`
        ).row();
      });
      keyboard.text("üîô Voltar", "back_to_menu");

      await ctx.editMessageText(
        "üìù *Meus Or√ßamentos*\nSelecione um or√ßamento para ver mais detalhes:", {
        reply_markup: keyboard,
        parse_mode: "Markdown"
      });
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("Erro ao listar or√ßamentos:", error);
      await ctx.reply("Ocorreu um erro ao carregar seus or√ßamentos. Tente novamente.");
    }
  });

  // Handler para visualizar um or√ßamento espec√≠fico
  bot.callbackQuery(/^view_budget:(.+)$/, async (ctx) => {
    try {
      const budgetId = ctx.match[1];
      const budget = await getBudget(budgetId);

      if (!budget) {
        await ctx.answerCallbackQuery("Or√ßamento n√£o encontrado!");
        return;
      }

      const message = formatBudgetDetails(budget);
      const keyboard = new InlineKeyboard()
        .text("üîô Voltar aos or√ßamentos", "view_budgets");

      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: "Markdown"
      });
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("Erro ao visualizar or√ßamento:", error);
      await ctx.reply("Ocorreu um erro ao carregar o or√ßamento. Tente novamente.");
    }
  });
}

// Fun√ß√µes auxiliares
function getBudgetEmoji(status: BudgetStatus): string {
  const statusMap: Record<BudgetStatus, string> = {
    PENDING: "‚è≥",
    ANALYZING: "üîç",
    APPROVED: "‚úÖ",
    REJECTED: "‚ùå",
    COMPLETED: "üéâ"
  };
  return statusMap[status];
}

function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString('pt-BR');
}

function formatBudgetDetails(budget: Budget): string {
  let message = `*Or√ßamento - ${budget.category}*\n\n`;
  message += `*Status:* ${getBudgetEmoji(budget.status)} ${budget.status}\n`;
  message += `*Data:* ${formatDate(budget.createdAt)}\n\n`;

  message += `*Objetivo:* ${budget.objective}\n`;
  message += `*P√∫blico-alvo:* ${budget.targetAudience}\n`;
  message += `*Funcionalidades:* ${budget.features}\n`;
  message += `*Prazo:* ${budget.deadline}\n`;
  message += `*Or√ßamento:* ${budget.budget}\n`;
  message += `*Design:* ${budget.design}\n`;
  message += `*Manuten√ß√£o:* ${budget.maintenance ? "Sim" : "N√£o"}\n`;

  if (budget.technologies) {
    message += `*Tecnologias:* ${budget.technologies}\n`;
  }

  if (budget.hosting) {
    message += `*Hospedagem:* Sim\n`;
  }

  if (budget.integrations) {
    message += `*Integra√ß√µes:* ${budget.integrations}\n`;
  }

  const answers = budget.specificAnswers as Record<string, string>;
  if (Object.keys(answers).length > 0) {
    message += "\n*Detalhes Espec√≠ficos:*\n";
    Object.entries(answers).forEach(([key, value]) => {
      message += `*${key}:* ${value}\n`;
    });
  }

  return message;
}