// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  name      String
  username  String?
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  inChatAi  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Budget   Budget[]
  messages Message[]
  Order    Order[]

  @@map("users")
}

model Budget {
  id              String       @id @default(cuid())
  userId          String
  category        String
  objective       String
  targetAudience  String
  features        String
  deadline        String
  budget          String
  design          String
  maintenance     Boolean      @default(false)
  technologies    String?
  hosting         Boolean      @default(false)
  integrations    String?
  specificAnswers Json?
  status          BudgetStatus @default(PENDING)
  chatActive      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  messages Message[]

  @@map("budgets")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  fileId    String?
  fileType  String?
  fromAdmin Boolean  @default(false)
  userId    String
  budgetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  budget Budget @relation(fields: [budgetId], references: [id])

  @@index([userId])
  @@index([budgetId])
  @@map("messages")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Order Order[]

  @@map("products")
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  productId String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("orders")
}

enum BudgetStatus {
  PENDING
  ANALYZING
  APPROVED
  REJECTED
  COMPLETED
}

enum Category {
  SITE
  BOT
  APP
  SCRIPT
}
