generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  name      String
  username  String?
  isAdmin   Boolean   @default(false)
  isActive  Boolean   @default(true)
  inChatAi  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Budget    Budget[]
  messages  Message[]
  Order     Order[]

  @@map("users")
}

model Budget {
  id              String    @id @default(cuid())
  userId          String
  category        String
  objective       String
  targetAudience  String
  features        String
  deadline        String
  budget          String
  design          String
  maintenance     Boolean   @default(false)
  technologies    String?
  hosting         Boolean   @default(false)
  integrations    String?
  specificAnswers Json?
  status          String    @default("PENDING")
  chatActive      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  messages        Message[]
  requests        Request[]

  @@map("budgets")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  fileId    String?
  fileType  String?
  fromAdmin Boolean  @default(false)
  userId    String
  budgetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budget    Budget   @relation(fields: [budgetId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([budgetId])
  @@map("messages")
}

model Product {
  id           String   @id @default(cuid())
  name         String
  description  String
  price        String
  image        String?
  category     String
  downloadLink String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order        Order[]

  @@map("products")
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  productId String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("orders")
}

model Request {
  id        String   @id @default(cuid())
  title     String
  content   String
  status    String   @default("PENDING")
  budgetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budget    Budget   @relation(fields: [budgetId], references: [id])

  @@map("requests")
}
